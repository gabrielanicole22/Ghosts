/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ghosts;

import java.awt.Color;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriela Mejía
 */
public class Juegos extends javax.swing.JFrame {

    /**
     * Creates new form UniversoMarvel
     */
    SistemaUsuarios sistemaUsuarios;
    Stats stats;

    public Juegos(SistemaUsuarios sistemaUsuarios, Stats stats) {
        this.sistemaUsuarios = sistemaUsuarios;
        this.stats = stats;
        initComponents();
        cargarPartidas();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    }

public void cargarPartidas() {
    ArrayList<Partida> partidas = sistemaUsuarios.usuarioIniciado.getPartidas();
    DefaultTableModel model = (DefaultTableModel) juegosTabla.getModel();
    
    // Límite máximo de partidas a mostrar
    int limitePartidas = 10;

    // Obtén el índice de inicio para evitar IndexOutOfBoundsException
    int indiceInicio = Math.max(0, partidas.size() - limitePartidas);

    for (int i = partidas.size() - 1; i >= indiceInicio; i--) {
        Partida partida = partidas.get(i);
        String resultado;

        if (partida.puntosGanados == 1.5) {
            resultado = "EMPATE";
        } else {
            resultado = (partida.victoria) ? "VICTORIA" : "DERROTA";
        }

        model.addRow(new Object[]{partida.ganador.getUsuario(), partida.perdedor.getUsuario(), partida.mensajeGane, partida.fecha});
    }
}
    Color SELECT_COLOR = new Color(184, 216, 190);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        matchTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        matchTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        juegosTabla = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        matchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Contrincante", "Resultado", "Fecha", "Puntos Ganados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(matchTable);

        matchTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Contrincante", "Resultado", "Fecha", "Puntos Ganados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(matchTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Juegos");
        setMinimumSize(new java.awt.Dimension(1280, 720));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setFont(new java.awt.Font("Nirmala UI", 1, 22)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("REGRESAR");
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegresarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRegresarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRegresarMouseExited(evt);
            }
        });
        jPanel1.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 600, -1, -1));

        jLabel1.setFont(new java.awt.Font("Parchment", 0, 130)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Descripción de mis Juegos");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        juegosTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ganador", "Perdedor", "Condición", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        juegosTabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(juegosTabla);
        if (juegosTabla.getColumnModel().getColumnCount() > 0) {
            juegosTabla.getColumnModel().getColumn(2).setPreferredWidth(60);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 900, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/fondos/fondoRaRep.png"))); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(1140, 650));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 650));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnRegresarMouseClicked

    private void btnRegresarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseEntered
        // TODO add your handling code here:
        btnRegresar.setForeground(SELECT_COLOR);
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_btnRegresarMouseEntered

    private void btnRegresarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseExited
        // TODO add your handling code here:
        btnRegresar.setForeground(Color.white);
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_btnRegresarMouseExited

    void printUsuarios(Usuario[] usuarios) {
        for (Usuario user : usuarios) {
            System.out.println(user.getUsuario() + ": " + user.getPuntos());
        }
    }

    Usuario[] ordernarUsuario(Usuario[] usuarios) {
        Usuario usuariosOrdenados[] = Arrays.copyOf(usuarios, usuarios.length);

        if (usuarios.length == 1) {
            return usuarios;
        }

        for (int i = 0; i < usuariosOrdenados.length - 1; i++) {
            Usuario L = usuarios[i];
            Usuario R = usuarios[i + 1];
            if (L.getPuntos() < R.getPuntos()) {
                usuarios[i + 1] = L;
                usuarios[i] = R;
            }
        }
        return usuarios;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable juegosTabla;
    private javax.swing.JTable matchTable;
    private javax.swing.JTable matchTable1;
    // End of variables declaration//GEN-END:variables
}
