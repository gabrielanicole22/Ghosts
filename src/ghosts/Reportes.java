/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ghosts;

import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Reportes extends javax.swing.JFrame {

    /**
     * Creates new form Reportes
     */
    SistemaUsuarios sistemaUsuarios;
    Stats stats;

    public Reportes(SistemaUsuarios sistemaUsuarios, Stats stats) {
        initComponents();
        this.sistemaUsuarios = sistemaUsuarios;
        this.stats = stats;
        initComponents();
        cargarRankings();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    void printUsuarios(Usuario[] usuarios) {
        for (Usuario user : usuarios) {
            System.out.println(user.getUsuario() + ": " + user.getPuntos());
        }
    }

    void cargarRankings() {
        Usuario[] usuarios = sistemaUsuarios.getUsuariosActivos();
        printUsuarios(usuarios);
        usuarios = ordernarUsuario(usuarios);
        System.out.println("===ORDENADOS===");
        printUsuarios(usuarios);

        DefaultTableModel model = (DefaultTableModel) rankingTable.getModel();
        for (int i = 0; i < usuarios.length; i++) {
            Usuario user = usuarios[i];
            model.addRow(new Object[]{i + 1, user.getUsuario(), user.getPuntos()});
        }
    }

    /**
     * Ordena los usuarios de mayor a menor en base a sus puntos
     *
     * @return
     */
    Usuario[] ordernarUsuario(Usuario[] usuarios) {
        Usuario usuariosOrdenados[] = Arrays.copyOf(usuarios, usuarios.length);
        // Usar bubble sort para ordenar los usuarios en base a su puntuacion

        // EL ARRAY ESTA ORDENADO PORQUE SOLO TIENE UN USUARIO
        if (usuarios.length == 1) {
            return usuarios;
        }

        for (int i = 0; i < usuariosOrdenados.length - 1; i++) {
            /*
            if (i== usuarios.length -1) {
                if (usuarios[i].getPuntos() < usuarios[i-1].getPuntos()) {
                    Usuario usuarioMayor = usuarios[i-1];
                    Usuario usuarioMenor = usuarios[i];
                    usuarios[i] = usuarioMayor;
                    usuarios[i-1] = usuarioMenor;
                    continue;
                }
            }
             */

            Usuario L = usuarios[i];
            Usuario R = usuarios[i + 1];
            if (L.getPuntos() < R.getPuntos()) {
                usuarios[i + 1] = L;
                usuarios[i] = R;
            }
        }
        return usuarios;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankingTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("RANKING");

        jLabel2.setText("ESTADISTICAS");

        rankingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posicion", "Usuario", "Puntos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rankingTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(418, 418, 418)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel2)
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rankingTable;
    // End of variables declaration//GEN-END:variables
}
